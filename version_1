import tkinter as tk
from tkinter import filedialog
import os
import hashlib

def select_folder_1():
    folder_path_1 = filedialog.askdirectory()
    entry_1.delete(0, tk.END)
    entry_1.insert(tk.END, folder_path_1)

def select_folder_2():
    folder_path_2 = filedialog.askdirectory()
    entry_2.delete(0, tk.END)
    entry_2.insert(tk.END, folder_path_2)

def calculate_hash(file_path):
    with open(file_path, 'rb') as f:
        hash_object = hashlib.md5()
        for chunk in iter(lambda: f.read(4096), b''):
            hash_object.update(chunk)
        return hash_object.hexdigest()

def start_search():
    folder_path_1 = entry_1.get()
    folder_path_2 = entry_2.get()
    filter_type = filter_var.get()

    files_dict = {}
    duplicates_count = 0
    unique_files_count = 0

    # Обход папки 1
    for root, dirs, files in os.walk(folder_path_1):
        for file in files:
            file_path = os.path.join(root, file)
            file_size = os.path.getsize(file_path)
            if file_size > 0:  # Исключаем пустые файлы
                if filter_type == "байтам":
                    file_hash = str(file_size)
                elif filter_type == "килобайтам":
                    file_hash = str(file_size // 1024)
                if file_hash not in files_dict:
                    files_dict[file_hash] = [file_path]
                    unique_files_count += 1
                else:
                    files_dict[file_hash].append(file_path)
                    duplicates_count += 1

    # Обход папки 2
    for root, dirs, files in os.walk(folder_path_2):
        for file in files:
            file_path = os.path.join(root, file)
            file_size = os.path.getsize(file_path)
            if file_size > 0:  # Исключаем пустые файлы
                if filter_type == "байтам":
                    file_hash = str(file_size)
                elif filter_type == "килобайтам":
                    file_hash = str(file_size // 1024)
                if file_hash not in files_dict:
                    files_dict[file_hash] = [file_path]
                    unique_files_count += 1
                else:
                    files_dict[file_hash].append(file_path)
                    duplicates_count += 1

    # Вывод результатов
    result_text = f"Найдено дубликатов файлов: {duplicates_count}\n"
    result_text += f"Найдено уникальных файлов: {unique_files_count}"
    result_label.config(text=result_text)

	
root = tk.Tk()

def search_duplicates(folder_path):
    files_dict = defaultdict(list)
    # Рекурсивный обход всех файлов в папке
    for root_dir, _, files in os.walk(folder_path):
        for file_name in files:
            file_path = os.path.join(root_dir, file_name)
            file_size = os.path.getsize(file_path)
            files_dict[file_size].append(file_path)

label_1 = tk.Label(root, text="Папка 1:")
label_1.pack()

entry_1 = tk.Entry(root, width=50)
entry_1.pack()

button_1 = tk.Button(root, text="Выбрать папку 1", command=select_folder_1)
button_1.pack()

label_2 = tk.Label(root, text="Папка 2:")
label_2.pack()

entry_2 = tk.Entry(root, width=50)
entry_2.pack()

button_2 = tk.Button(root, text="Выбрать папку 2", command=select_folder_2)
button_2.pack()

filter_var = tk.StringVar(root)
filter_var.set("байтам")
filter_dropdown = tk.OptionMenu(root, filter_var, "байтам", "килобайтам")
filter_dropdown.pack()

start_button = tk.Button(root, text="Старт", command=start_search)
start_button.pack()

result_label = tk.Label(root, text="")
result_label.pack()

root.mainloop()
